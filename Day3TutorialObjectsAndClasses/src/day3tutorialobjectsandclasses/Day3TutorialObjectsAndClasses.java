package day3tutorialobjectsandclasses;

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Day3TutorialObjectsAndClasses {

    public static void main(String[] args) {
        Circle myCircle = new Circle(10);

        Square mySquare = new Square(6);

        Triangle myTriangle = new Triangle(5, 6, 6);
        try {
            double k = myTriangle.area();
            System.out.println("The area of your triangle : " + myTriangle.area());
        } catch (IllegalArgumentException ex) {
            System.out.println(ex.getMessage());
        }

        System.out.println(myCircle);
        System.out.println(mySquare);
        System.out.println(myTriangle);

        BigDecimal bd = new BigDecimal(myCircle.area());
        System.out.println("Area of the circle is " + bd.round(MathContext.DECIMAL32));
        
        //Shape objects to compare

        Circle myBigCircle = new Circle(10);
        Circle mySmallCircle = new Circle(10);
        
        Triangle myBigTriangle = new Triangle(7,7,7);
        Triangle mySmallTriangle = new Triangle(7,7,8);
        
        //Check if the objects are equal, using Override in each shape class
        //change object1 and object2 to see if equal
        //Boolean checkIfEqual = object1.equals(object2);
        Boolean checkIfEqual = myBigTriangle.equals(mySmallTriangle);
        
        //Has to change
        System.out.println("mySmallTriangle = " + mySmallTriangle);
        System.out.println("myBigTriangle = " + myBigTriangle);
        
        
        if(checkIfEqual){
            System.out.println("The two above triangles are the same");
        }else{
        System.out.println("The two above triangles are not the same");
        }
        Circle[] myCircles = new Circle[5];
        Square[] mySquares = new Square[5];
        Triangle[] myTriangles = new Triangle[5];

        Shape[] myShapes = new Shape[6];
        myShapes[0] = new Circle(10);
        myShapes[1] = new Triangle(5, 6, 6);
        myShapes[2] = new Square(10);
        myShapes[3] = new Circle(10);
        myShapes[4] = new Circle(10);
        myShapes[5] = new Circle(10);
        
        
        //Does the same as generic collection class, but supports boxing and unboxing
//        for (Shape shape: myShapes){
//            System.out.println(shape);
//        }
        
        //Using a generic collection class
        List<Shape> shapesList = new ArrayList<>(); //instantiate the list
        shapesList.addAll(Arrays.asList(myShapes)); //replaced the for loop with .addAll asList (autogenerated by NetBeans)
        shapesList.forEach(System.out::println);
    }

}
